// <auto-generated />
using FanDuel.SportsDepthChart.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FanDuel.SportsDepthChart.Infra.Migrations
{
    [DbContext(typeof(SportsDepthChartContext))]
    [Migration("20241015053053_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Chart.ChartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Charts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Offence",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Player.PlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.PlayerChartPlacement.PlayerChartPlacementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionDepth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerChartPlacements");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Sport.SportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NFL"
                        });
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Team.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tampa Bay Buccaneers",
                            SportId = 1
                        });
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Chart.ChartEntity", b =>
                {
                    b.HasOne("FanDuel.SportsDepthChart.Core.Team.TeamEntity", "Team")
                        .WithMany("Charts")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Player.PlayerEntity", b =>
                {
                    b.HasOne("FanDuel.SportsDepthChart.Core.Team.TeamEntity", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.PlayerChartPlacement.PlayerChartPlacementEntity", b =>
                {
                    b.HasOne("FanDuel.SportsDepthChart.Core.Chart.ChartEntity", "Chart")
                        .WithMany("PlayerPlacements")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FanDuel.SportsDepthChart.Core.Player.PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Team.TeamEntity", b =>
                {
                    b.HasOne("FanDuel.SportsDepthChart.Core.Sport.SportEntity", "Sport")
                        .WithMany("Teams")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Chart.ChartEntity", b =>
                {
                    b.Navigation("PlayerPlacements");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Sport.SportEntity", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FanDuel.SportsDepthChart.Core.Team.TeamEntity", b =>
                {
                    b.Navigation("Charts");
                });
#pragma warning restore 612, 618
        }
    }
}
